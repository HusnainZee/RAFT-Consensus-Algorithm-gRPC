// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: node.proto

#include "node.pb.h"
#include "node.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace RaftNodes {

static const char* MsgService_method_names[] = {
  "/RaftNodes.MsgService/sendRequest",
  "/RaftNodes.MsgService/sendVoteRequest",
  "/RaftNodes.MsgService/sendStatusUpdateRequest",
};

std::unique_ptr< MsgService::Stub> MsgService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MsgService::Stub> stub(new MsgService::Stub(channel, options));
  return stub;
}

MsgService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_sendRequest_(MsgService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sendVoteRequest_(MsgService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sendStatusUpdateRequest_(MsgService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MsgService::Stub::sendRequest(::grpc::ClientContext* context, const ::RaftNodes::StringRequest& request, ::RaftNodes::StringReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RaftNodes::StringRequest, ::RaftNodes::StringReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_sendRequest_, context, request, response);
}

void MsgService::Stub::async::sendRequest(::grpc::ClientContext* context, const ::RaftNodes::StringRequest* request, ::RaftNodes::StringReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RaftNodes::StringRequest, ::RaftNodes::StringReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendRequest_, context, request, response, std::move(f));
}

void MsgService::Stub::async::sendRequest(::grpc::ClientContext* context, const ::RaftNodes::StringRequest* request, ::RaftNodes::StringReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RaftNodes::StringReply>* MsgService::Stub::PrepareAsyncsendRequestRaw(::grpc::ClientContext* context, const ::RaftNodes::StringRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RaftNodes::StringReply, ::RaftNodes::StringRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_sendRequest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RaftNodes::StringReply>* MsgService::Stub::AsyncsendRequestRaw(::grpc::ClientContext* context, const ::RaftNodes::StringRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsendRequestRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MsgService::Stub::sendVoteRequest(::grpc::ClientContext* context, const ::RaftNodes::StringVoteRequest& request, ::RaftNodes::StringVoteReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RaftNodes::StringVoteRequest, ::RaftNodes::StringVoteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_sendVoteRequest_, context, request, response);
}

void MsgService::Stub::async::sendVoteRequest(::grpc::ClientContext* context, const ::RaftNodes::StringVoteRequest* request, ::RaftNodes::StringVoteReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RaftNodes::StringVoteRequest, ::RaftNodes::StringVoteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendVoteRequest_, context, request, response, std::move(f));
}

void MsgService::Stub::async::sendVoteRequest(::grpc::ClientContext* context, const ::RaftNodes::StringVoteRequest* request, ::RaftNodes::StringVoteReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendVoteRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RaftNodes::StringVoteReply>* MsgService::Stub::PrepareAsyncsendVoteRequestRaw(::grpc::ClientContext* context, const ::RaftNodes::StringVoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RaftNodes::StringVoteReply, ::RaftNodes::StringVoteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_sendVoteRequest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RaftNodes::StringVoteReply>* MsgService::Stub::AsyncsendVoteRequestRaw(::grpc::ClientContext* context, const ::RaftNodes::StringVoteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsendVoteRequestRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MsgService::Stub::sendStatusUpdateRequest(::grpc::ClientContext* context, const ::RaftNodes::StringStatusUptateRequest& request, ::RaftNodes::StringStatusUptateReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RaftNodes::StringStatusUptateRequest, ::RaftNodes::StringStatusUptateReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_sendStatusUpdateRequest_, context, request, response);
}

void MsgService::Stub::async::sendStatusUpdateRequest(::grpc::ClientContext* context, const ::RaftNodes::StringStatusUptateRequest* request, ::RaftNodes::StringStatusUptateReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RaftNodes::StringStatusUptateRequest, ::RaftNodes::StringStatusUptateReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendStatusUpdateRequest_, context, request, response, std::move(f));
}

void MsgService::Stub::async::sendStatusUpdateRequest(::grpc::ClientContext* context, const ::RaftNodes::StringStatusUptateRequest* request, ::RaftNodes::StringStatusUptateReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendStatusUpdateRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RaftNodes::StringStatusUptateReply>* MsgService::Stub::PrepareAsyncsendStatusUpdateRequestRaw(::grpc::ClientContext* context, const ::RaftNodes::StringStatusUptateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RaftNodes::StringStatusUptateReply, ::RaftNodes::StringStatusUptateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_sendStatusUpdateRequest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RaftNodes::StringStatusUptateReply>* MsgService::Stub::AsyncsendStatusUpdateRequestRaw(::grpc::ClientContext* context, const ::RaftNodes::StringStatusUptateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsendStatusUpdateRequestRaw(context, request, cq);
  result->StartCall();
  return result;
}

MsgService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MsgService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MsgService::Service, ::RaftNodes::StringRequest, ::RaftNodes::StringReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MsgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RaftNodes::StringRequest* req,
             ::RaftNodes::StringReply* resp) {
               return service->sendRequest(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MsgService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MsgService::Service, ::RaftNodes::StringVoteRequest, ::RaftNodes::StringVoteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MsgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RaftNodes::StringVoteRequest* req,
             ::RaftNodes::StringVoteReply* resp) {
               return service->sendVoteRequest(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MsgService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MsgService::Service, ::RaftNodes::StringStatusUptateRequest, ::RaftNodes::StringStatusUptateReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MsgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RaftNodes::StringStatusUptateRequest* req,
             ::RaftNodes::StringStatusUptateReply* resp) {
               return service->sendStatusUpdateRequest(ctx, req, resp);
             }, this)));
}

MsgService::Service::~Service() {
}

::grpc::Status MsgService::Service::sendRequest(::grpc::ServerContext* context, const ::RaftNodes::StringRequest* request, ::RaftNodes::StringReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MsgService::Service::sendVoteRequest(::grpc::ServerContext* context, const ::RaftNodes::StringVoteRequest* request, ::RaftNodes::StringVoteReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MsgService::Service::sendStatusUpdateRequest(::grpc::ServerContext* context, const ::RaftNodes::StringStatusUptateRequest* request, ::RaftNodes::StringStatusUptateReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace RaftNodes

