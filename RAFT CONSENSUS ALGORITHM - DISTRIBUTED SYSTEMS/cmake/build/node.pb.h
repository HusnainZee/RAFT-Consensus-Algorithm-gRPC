// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_node_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_node_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_node_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_node_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2eproto;
namespace RaftNodes {
class StringReply;
struct StringReplyDefaultTypeInternal;
extern StringReplyDefaultTypeInternal _StringReply_default_instance_;
class StringRequest;
struct StringRequestDefaultTypeInternal;
extern StringRequestDefaultTypeInternal _StringRequest_default_instance_;
class StringStatusUptateReply;
struct StringStatusUptateReplyDefaultTypeInternal;
extern StringStatusUptateReplyDefaultTypeInternal _StringStatusUptateReply_default_instance_;
class StringStatusUptateRequest;
struct StringStatusUptateRequestDefaultTypeInternal;
extern StringStatusUptateRequestDefaultTypeInternal _StringStatusUptateRequest_default_instance_;
class StringVoteReply;
struct StringVoteReplyDefaultTypeInternal;
extern StringVoteReplyDefaultTypeInternal _StringVoteReply_default_instance_;
class StringVoteRequest;
struct StringVoteRequestDefaultTypeInternal;
extern StringVoteRequestDefaultTypeInternal _StringVoteRequest_default_instance_;
}  // namespace RaftNodes
PROTOBUF_NAMESPACE_OPEN
template<> ::RaftNodes::StringReply* Arena::CreateMaybeMessage<::RaftNodes::StringReply>(Arena*);
template<> ::RaftNodes::StringRequest* Arena::CreateMaybeMessage<::RaftNodes::StringRequest>(Arena*);
template<> ::RaftNodes::StringStatusUptateReply* Arena::CreateMaybeMessage<::RaftNodes::StringStatusUptateReply>(Arena*);
template<> ::RaftNodes::StringStatusUptateRequest* Arena::CreateMaybeMessage<::RaftNodes::StringStatusUptateRequest>(Arena*);
template<> ::RaftNodes::StringVoteReply* Arena::CreateMaybeMessage<::RaftNodes::StringVoteReply>(Arena*);
template<> ::RaftNodes::StringVoteRequest* Arena::CreateMaybeMessage<::RaftNodes::StringVoteRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace RaftNodes {

// ===================================================================

class StringRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RaftNodes.StringRequest) */ {
 public:
  inline StringRequest() : StringRequest(nullptr) {}
  ~StringRequest() override;
  explicit PROTOBUF_CONSTEXPR StringRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringRequest(const StringRequest& from);
  StringRequest(StringRequest&& from) noexcept
    : StringRequest() {
    *this = ::std::move(from);
  }

  inline StringRequest& operator=(const StringRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringRequest& operator=(StringRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringRequest* internal_default_instance() {
    return reinterpret_cast<const StringRequest*>(
               &_StringRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StringRequest& a, StringRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StringRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringRequest& from) {
    StringRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RaftNodes.StringRequest";
  }
  protected:
  explicit StringRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodestatusFieldNumber = 2,
    kMessageFieldNumber = 4,
    kAddressFieldNumber = 5,
    kNodeidFieldNumber = 1,
    kTermnumberFieldNumber = 3,
  };
  // string nodestatus = 2;
  void clear_nodestatus();
  const std::string& nodestatus() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nodestatus(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nodestatus();
  PROTOBUF_NODISCARD std::string* release_nodestatus();
  void set_allocated_nodestatus(std::string* nodestatus);
  private:
  const std::string& _internal_nodestatus() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nodestatus(const std::string& value);
  std::string* _internal_mutable_nodestatus();
  public:

  // string message = 4;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string address = 5;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // int32 nodeid = 1;
  void clear_nodeid();
  int32_t nodeid() const;
  void set_nodeid(int32_t value);
  private:
  int32_t _internal_nodeid() const;
  void _internal_set_nodeid(int32_t value);
  public:

  // int32 termnumber = 3;
  void clear_termnumber();
  int32_t termnumber() const;
  void set_termnumber(int32_t value);
  private:
  int32_t _internal_termnumber() const;
  void _internal_set_termnumber(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:RaftNodes.StringRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodestatus_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    int32_t nodeid_;
    int32_t termnumber_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class StringReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RaftNodes.StringReply) */ {
 public:
  inline StringReply() : StringReply(nullptr) {}
  ~StringReply() override;
  explicit PROTOBUF_CONSTEXPR StringReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringReply(const StringReply& from);
  StringReply(StringReply&& from) noexcept
    : StringReply() {
    *this = ::std::move(from);
  }

  inline StringReply& operator=(const StringReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringReply& operator=(StringReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringReply* internal_default_instance() {
    return reinterpret_cast<const StringReply*>(
               &_StringReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StringReply& a, StringReply& b) {
    a.Swap(&b);
  }
  inline void Swap(StringReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringReply& from) {
    StringReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RaftNodes.StringReply";
  }
  protected:
  explicit StringReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRcvNodestatusFieldNumber = 2,
    kRcvMessageFieldNumber = 4,
    kRcvAddressFieldNumber = 5,
    kRcvNodeidFieldNumber = 1,
    kRcvTermnumberFieldNumber = 3,
  };
  // string rcv_nodestatus = 2;
  void clear_rcv_nodestatus();
  const std::string& rcv_nodestatus() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rcv_nodestatus(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rcv_nodestatus();
  PROTOBUF_NODISCARD std::string* release_rcv_nodestatus();
  void set_allocated_rcv_nodestatus(std::string* rcv_nodestatus);
  private:
  const std::string& _internal_rcv_nodestatus() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rcv_nodestatus(const std::string& value);
  std::string* _internal_mutable_rcv_nodestatus();
  public:

  // string rcv_message = 4;
  void clear_rcv_message();
  const std::string& rcv_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rcv_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rcv_message();
  PROTOBUF_NODISCARD std::string* release_rcv_message();
  void set_allocated_rcv_message(std::string* rcv_message);
  private:
  const std::string& _internal_rcv_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rcv_message(const std::string& value);
  std::string* _internal_mutable_rcv_message();
  public:

  // string rcv_address = 5;
  void clear_rcv_address();
  const std::string& rcv_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rcv_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rcv_address();
  PROTOBUF_NODISCARD std::string* release_rcv_address();
  void set_allocated_rcv_address(std::string* rcv_address);
  private:
  const std::string& _internal_rcv_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rcv_address(const std::string& value);
  std::string* _internal_mutable_rcv_address();
  public:

  // int32 rcv_nodeid = 1;
  void clear_rcv_nodeid();
  int32_t rcv_nodeid() const;
  void set_rcv_nodeid(int32_t value);
  private:
  int32_t _internal_rcv_nodeid() const;
  void _internal_set_rcv_nodeid(int32_t value);
  public:

  // int32 rcv_termnumber = 3;
  void clear_rcv_termnumber();
  int32_t rcv_termnumber() const;
  void set_rcv_termnumber(int32_t value);
  private:
  int32_t _internal_rcv_termnumber() const;
  void _internal_set_rcv_termnumber(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:RaftNodes.StringReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rcv_nodestatus_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rcv_message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rcv_address_;
    int32_t rcv_nodeid_;
    int32_t rcv_termnumber_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class StringVoteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RaftNodes.StringVoteRequest) */ {
 public:
  inline StringVoteRequest() : StringVoteRequest(nullptr) {}
  ~StringVoteRequest() override;
  explicit PROTOBUF_CONSTEXPR StringVoteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringVoteRequest(const StringVoteRequest& from);
  StringVoteRequest(StringVoteRequest&& from) noexcept
    : StringVoteRequest() {
    *this = ::std::move(from);
  }

  inline StringVoteRequest& operator=(const StringVoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringVoteRequest& operator=(StringVoteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringVoteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringVoteRequest* internal_default_instance() {
    return reinterpret_cast<const StringVoteRequest*>(
               &_StringVoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StringVoteRequest& a, StringVoteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StringVoteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringVoteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringVoteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringVoteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringVoteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringVoteRequest& from) {
    StringVoteRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringVoteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RaftNodes.StringVoteRequest";
  }
  protected:
  explicit StringVoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLognameFieldNumber = 2,
    kTermnumberFieldNumber = 1,
  };
  // string logname = 2;
  void clear_logname();
  const std::string& logname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_logname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_logname();
  PROTOBUF_NODISCARD std::string* release_logname();
  void set_allocated_logname(std::string* logname);
  private:
  const std::string& _internal_logname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logname(const std::string& value);
  std::string* _internal_mutable_logname();
  public:

  // int32 termnumber = 1;
  void clear_termnumber();
  int32_t termnumber() const;
  void set_termnumber(int32_t value);
  private:
  int32_t _internal_termnumber() const;
  void _internal_set_termnumber(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:RaftNodes.StringVoteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logname_;
    int32_t termnumber_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class StringVoteReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RaftNodes.StringVoteReply) */ {
 public:
  inline StringVoteReply() : StringVoteReply(nullptr) {}
  ~StringVoteReply() override;
  explicit PROTOBUF_CONSTEXPR StringVoteReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringVoteReply(const StringVoteReply& from);
  StringVoteReply(StringVoteReply&& from) noexcept
    : StringVoteReply() {
    *this = ::std::move(from);
  }

  inline StringVoteReply& operator=(const StringVoteReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringVoteReply& operator=(StringVoteReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringVoteReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringVoteReply* internal_default_instance() {
    return reinterpret_cast<const StringVoteReply*>(
               &_StringVoteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StringVoteReply& a, StringVoteReply& b) {
    a.Swap(&b);
  }
  inline void Swap(StringVoteReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringVoteReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringVoteReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringVoteReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringVoteReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringVoteReply& from) {
    StringVoteReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringVoteReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RaftNodes.StringVoteReply";
  }
  protected:
  explicit StringVoteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRcvVoteFieldNumber = 3,
    kRcvTermnumberFieldNumber = 1,
    kRcvNodeidFieldNumber = 2,
  };
  // string rcv_vote = 3;
  void clear_rcv_vote();
  const std::string& rcv_vote() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rcv_vote(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rcv_vote();
  PROTOBUF_NODISCARD std::string* release_rcv_vote();
  void set_allocated_rcv_vote(std::string* rcv_vote);
  private:
  const std::string& _internal_rcv_vote() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rcv_vote(const std::string& value);
  std::string* _internal_mutable_rcv_vote();
  public:

  // int32 rcv_termnumber = 1;
  void clear_rcv_termnumber();
  int32_t rcv_termnumber() const;
  void set_rcv_termnumber(int32_t value);
  private:
  int32_t _internal_rcv_termnumber() const;
  void _internal_set_rcv_termnumber(int32_t value);
  public:

  // int32 rcv_nodeid = 2;
  void clear_rcv_nodeid();
  int32_t rcv_nodeid() const;
  void set_rcv_nodeid(int32_t value);
  private:
  int32_t _internal_rcv_nodeid() const;
  void _internal_set_rcv_nodeid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:RaftNodes.StringVoteReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rcv_vote_;
    int32_t rcv_termnumber_;
    int32_t rcv_nodeid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class StringStatusUptateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RaftNodes.StringStatusUptateRequest) */ {
 public:
  inline StringStatusUptateRequest() : StringStatusUptateRequest(nullptr) {}
  ~StringStatusUptateRequest() override;
  explicit PROTOBUF_CONSTEXPR StringStatusUptateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringStatusUptateRequest(const StringStatusUptateRequest& from);
  StringStatusUptateRequest(StringStatusUptateRequest&& from) noexcept
    : StringStatusUptateRequest() {
    *this = ::std::move(from);
  }

  inline StringStatusUptateRequest& operator=(const StringStatusUptateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringStatusUptateRequest& operator=(StringStatusUptateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringStatusUptateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringStatusUptateRequest* internal_default_instance() {
    return reinterpret_cast<const StringStatusUptateRequest*>(
               &_StringStatusUptateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StringStatusUptateRequest& a, StringStatusUptateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StringStatusUptateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringStatusUptateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringStatusUptateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringStatusUptateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringStatusUptateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringStatusUptateRequest& from) {
    StringStatusUptateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringStatusUptateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RaftNodes.StringStatusUptateRequest";
  }
  protected:
  explicit StringStatusUptateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:RaftNodes.StringStatusUptateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class StringStatusUptateReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RaftNodes.StringStatusUptateReply) */ {
 public:
  inline StringStatusUptateReply() : StringStatusUptateReply(nullptr) {}
  ~StringStatusUptateReply() override;
  explicit PROTOBUF_CONSTEXPR StringStatusUptateReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringStatusUptateReply(const StringStatusUptateReply& from);
  StringStatusUptateReply(StringStatusUptateReply&& from) noexcept
    : StringStatusUptateReply() {
    *this = ::std::move(from);
  }

  inline StringStatusUptateReply& operator=(const StringStatusUptateReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringStatusUptateReply& operator=(StringStatusUptateReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringStatusUptateReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringStatusUptateReply* internal_default_instance() {
    return reinterpret_cast<const StringStatusUptateReply*>(
               &_StringStatusUptateReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StringStatusUptateReply& a, StringStatusUptateReply& b) {
    a.Swap(&b);
  }
  inline void Swap(StringStatusUptateReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringStatusUptateReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringStatusUptateReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringStatusUptateReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringStatusUptateReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringStatusUptateReply& from) {
    StringStatusUptateReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringStatusUptateReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RaftNodes.StringStatusUptateReply";
  }
  protected:
  explicit StringStatusUptateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRcvStatusFieldNumber = 1,
  };
  // string rcv_status = 1;
  void clear_rcv_status();
  const std::string& rcv_status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rcv_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rcv_status();
  PROTOBUF_NODISCARD std::string* release_rcv_status();
  void set_allocated_rcv_status(std::string* rcv_status);
  private:
  const std::string& _internal_rcv_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rcv_status(const std::string& value);
  std::string* _internal_mutable_rcv_status();
  public:

  // @@protoc_insertion_point(class_scope:RaftNodes.StringStatusUptateReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rcv_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_node_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StringRequest

// int32 nodeid = 1;
inline void StringRequest::clear_nodeid() {
  _impl_.nodeid_ = 0;
}
inline int32_t StringRequest::_internal_nodeid() const {
  return _impl_.nodeid_;
}
inline int32_t StringRequest::nodeid() const {
  // @@protoc_insertion_point(field_get:RaftNodes.StringRequest.nodeid)
  return _internal_nodeid();
}
inline void StringRequest::_internal_set_nodeid(int32_t value) {
  
  _impl_.nodeid_ = value;
}
inline void StringRequest::set_nodeid(int32_t value) {
  _internal_set_nodeid(value);
  // @@protoc_insertion_point(field_set:RaftNodes.StringRequest.nodeid)
}

// string nodestatus = 2;
inline void StringRequest::clear_nodestatus() {
  _impl_.nodestatus_.ClearToEmpty();
}
inline const std::string& StringRequest::nodestatus() const {
  // @@protoc_insertion_point(field_get:RaftNodes.StringRequest.nodestatus)
  return _internal_nodestatus();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringRequest::set_nodestatus(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nodestatus_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RaftNodes.StringRequest.nodestatus)
}
inline std::string* StringRequest::mutable_nodestatus() {
  std::string* _s = _internal_mutable_nodestatus();
  // @@protoc_insertion_point(field_mutable:RaftNodes.StringRequest.nodestatus)
  return _s;
}
inline const std::string& StringRequest::_internal_nodestatus() const {
  return _impl_.nodestatus_.Get();
}
inline void StringRequest::_internal_set_nodestatus(const std::string& value) {
  
  _impl_.nodestatus_.Set(value, GetArenaForAllocation());
}
inline std::string* StringRequest::_internal_mutable_nodestatus() {
  
  return _impl_.nodestatus_.Mutable(GetArenaForAllocation());
}
inline std::string* StringRequest::release_nodestatus() {
  // @@protoc_insertion_point(field_release:RaftNodes.StringRequest.nodestatus)
  return _impl_.nodestatus_.Release();
}
inline void StringRequest::set_allocated_nodestatus(std::string* nodestatus) {
  if (nodestatus != nullptr) {
    
  } else {
    
  }
  _impl_.nodestatus_.SetAllocated(nodestatus, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nodestatus_.IsDefault()) {
    _impl_.nodestatus_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RaftNodes.StringRequest.nodestatus)
}

// int32 termnumber = 3;
inline void StringRequest::clear_termnumber() {
  _impl_.termnumber_ = 0;
}
inline int32_t StringRequest::_internal_termnumber() const {
  return _impl_.termnumber_;
}
inline int32_t StringRequest::termnumber() const {
  // @@protoc_insertion_point(field_get:RaftNodes.StringRequest.termnumber)
  return _internal_termnumber();
}
inline void StringRequest::_internal_set_termnumber(int32_t value) {
  
  _impl_.termnumber_ = value;
}
inline void StringRequest::set_termnumber(int32_t value) {
  _internal_set_termnumber(value);
  // @@protoc_insertion_point(field_set:RaftNodes.StringRequest.termnumber)
}

// string message = 4;
inline void StringRequest::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& StringRequest::message() const {
  // @@protoc_insertion_point(field_get:RaftNodes.StringRequest.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringRequest::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RaftNodes.StringRequest.message)
}
inline std::string* StringRequest::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:RaftNodes.StringRequest.message)
  return _s;
}
inline const std::string& StringRequest::_internal_message() const {
  return _impl_.message_.Get();
}
inline void StringRequest::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* StringRequest::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* StringRequest::release_message() {
  // @@protoc_insertion_point(field_release:RaftNodes.StringRequest.message)
  return _impl_.message_.Release();
}
inline void StringRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RaftNodes.StringRequest.message)
}

// string address = 5;
inline void StringRequest::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& StringRequest::address() const {
  // @@protoc_insertion_point(field_get:RaftNodes.StringRequest.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringRequest::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RaftNodes.StringRequest.address)
}
inline std::string* StringRequest::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:RaftNodes.StringRequest.address)
  return _s;
}
inline const std::string& StringRequest::_internal_address() const {
  return _impl_.address_.Get();
}
inline void StringRequest::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* StringRequest::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* StringRequest::release_address() {
  // @@protoc_insertion_point(field_release:RaftNodes.StringRequest.address)
  return _impl_.address_.Release();
}
inline void StringRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RaftNodes.StringRequest.address)
}

// -------------------------------------------------------------------

// StringReply

// int32 rcv_nodeid = 1;
inline void StringReply::clear_rcv_nodeid() {
  _impl_.rcv_nodeid_ = 0;
}
inline int32_t StringReply::_internal_rcv_nodeid() const {
  return _impl_.rcv_nodeid_;
}
inline int32_t StringReply::rcv_nodeid() const {
  // @@protoc_insertion_point(field_get:RaftNodes.StringReply.rcv_nodeid)
  return _internal_rcv_nodeid();
}
inline void StringReply::_internal_set_rcv_nodeid(int32_t value) {
  
  _impl_.rcv_nodeid_ = value;
}
inline void StringReply::set_rcv_nodeid(int32_t value) {
  _internal_set_rcv_nodeid(value);
  // @@protoc_insertion_point(field_set:RaftNodes.StringReply.rcv_nodeid)
}

// string rcv_nodestatus = 2;
inline void StringReply::clear_rcv_nodestatus() {
  _impl_.rcv_nodestatus_.ClearToEmpty();
}
inline const std::string& StringReply::rcv_nodestatus() const {
  // @@protoc_insertion_point(field_get:RaftNodes.StringReply.rcv_nodestatus)
  return _internal_rcv_nodestatus();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringReply::set_rcv_nodestatus(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rcv_nodestatus_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RaftNodes.StringReply.rcv_nodestatus)
}
inline std::string* StringReply::mutable_rcv_nodestatus() {
  std::string* _s = _internal_mutable_rcv_nodestatus();
  // @@protoc_insertion_point(field_mutable:RaftNodes.StringReply.rcv_nodestatus)
  return _s;
}
inline const std::string& StringReply::_internal_rcv_nodestatus() const {
  return _impl_.rcv_nodestatus_.Get();
}
inline void StringReply::_internal_set_rcv_nodestatus(const std::string& value) {
  
  _impl_.rcv_nodestatus_.Set(value, GetArenaForAllocation());
}
inline std::string* StringReply::_internal_mutable_rcv_nodestatus() {
  
  return _impl_.rcv_nodestatus_.Mutable(GetArenaForAllocation());
}
inline std::string* StringReply::release_rcv_nodestatus() {
  // @@protoc_insertion_point(field_release:RaftNodes.StringReply.rcv_nodestatus)
  return _impl_.rcv_nodestatus_.Release();
}
inline void StringReply::set_allocated_rcv_nodestatus(std::string* rcv_nodestatus) {
  if (rcv_nodestatus != nullptr) {
    
  } else {
    
  }
  _impl_.rcv_nodestatus_.SetAllocated(rcv_nodestatus, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rcv_nodestatus_.IsDefault()) {
    _impl_.rcv_nodestatus_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RaftNodes.StringReply.rcv_nodestatus)
}

// int32 rcv_termnumber = 3;
inline void StringReply::clear_rcv_termnumber() {
  _impl_.rcv_termnumber_ = 0;
}
inline int32_t StringReply::_internal_rcv_termnumber() const {
  return _impl_.rcv_termnumber_;
}
inline int32_t StringReply::rcv_termnumber() const {
  // @@protoc_insertion_point(field_get:RaftNodes.StringReply.rcv_termnumber)
  return _internal_rcv_termnumber();
}
inline void StringReply::_internal_set_rcv_termnumber(int32_t value) {
  
  _impl_.rcv_termnumber_ = value;
}
inline void StringReply::set_rcv_termnumber(int32_t value) {
  _internal_set_rcv_termnumber(value);
  // @@protoc_insertion_point(field_set:RaftNodes.StringReply.rcv_termnumber)
}

// string rcv_message = 4;
inline void StringReply::clear_rcv_message() {
  _impl_.rcv_message_.ClearToEmpty();
}
inline const std::string& StringReply::rcv_message() const {
  // @@protoc_insertion_point(field_get:RaftNodes.StringReply.rcv_message)
  return _internal_rcv_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringReply::set_rcv_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rcv_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RaftNodes.StringReply.rcv_message)
}
inline std::string* StringReply::mutable_rcv_message() {
  std::string* _s = _internal_mutable_rcv_message();
  // @@protoc_insertion_point(field_mutable:RaftNodes.StringReply.rcv_message)
  return _s;
}
inline const std::string& StringReply::_internal_rcv_message() const {
  return _impl_.rcv_message_.Get();
}
inline void StringReply::_internal_set_rcv_message(const std::string& value) {
  
  _impl_.rcv_message_.Set(value, GetArenaForAllocation());
}
inline std::string* StringReply::_internal_mutable_rcv_message() {
  
  return _impl_.rcv_message_.Mutable(GetArenaForAllocation());
}
inline std::string* StringReply::release_rcv_message() {
  // @@protoc_insertion_point(field_release:RaftNodes.StringReply.rcv_message)
  return _impl_.rcv_message_.Release();
}
inline void StringReply::set_allocated_rcv_message(std::string* rcv_message) {
  if (rcv_message != nullptr) {
    
  } else {
    
  }
  _impl_.rcv_message_.SetAllocated(rcv_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rcv_message_.IsDefault()) {
    _impl_.rcv_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RaftNodes.StringReply.rcv_message)
}

// string rcv_address = 5;
inline void StringReply::clear_rcv_address() {
  _impl_.rcv_address_.ClearToEmpty();
}
inline const std::string& StringReply::rcv_address() const {
  // @@protoc_insertion_point(field_get:RaftNodes.StringReply.rcv_address)
  return _internal_rcv_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringReply::set_rcv_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rcv_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RaftNodes.StringReply.rcv_address)
}
inline std::string* StringReply::mutable_rcv_address() {
  std::string* _s = _internal_mutable_rcv_address();
  // @@protoc_insertion_point(field_mutable:RaftNodes.StringReply.rcv_address)
  return _s;
}
inline const std::string& StringReply::_internal_rcv_address() const {
  return _impl_.rcv_address_.Get();
}
inline void StringReply::_internal_set_rcv_address(const std::string& value) {
  
  _impl_.rcv_address_.Set(value, GetArenaForAllocation());
}
inline std::string* StringReply::_internal_mutable_rcv_address() {
  
  return _impl_.rcv_address_.Mutable(GetArenaForAllocation());
}
inline std::string* StringReply::release_rcv_address() {
  // @@protoc_insertion_point(field_release:RaftNodes.StringReply.rcv_address)
  return _impl_.rcv_address_.Release();
}
inline void StringReply::set_allocated_rcv_address(std::string* rcv_address) {
  if (rcv_address != nullptr) {
    
  } else {
    
  }
  _impl_.rcv_address_.SetAllocated(rcv_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rcv_address_.IsDefault()) {
    _impl_.rcv_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RaftNodes.StringReply.rcv_address)
}

// -------------------------------------------------------------------

// StringVoteRequest

// int32 termnumber = 1;
inline void StringVoteRequest::clear_termnumber() {
  _impl_.termnumber_ = 0;
}
inline int32_t StringVoteRequest::_internal_termnumber() const {
  return _impl_.termnumber_;
}
inline int32_t StringVoteRequest::termnumber() const {
  // @@protoc_insertion_point(field_get:RaftNodes.StringVoteRequest.termnumber)
  return _internal_termnumber();
}
inline void StringVoteRequest::_internal_set_termnumber(int32_t value) {
  
  _impl_.termnumber_ = value;
}
inline void StringVoteRequest::set_termnumber(int32_t value) {
  _internal_set_termnumber(value);
  // @@protoc_insertion_point(field_set:RaftNodes.StringVoteRequest.termnumber)
}

// string logname = 2;
inline void StringVoteRequest::clear_logname() {
  _impl_.logname_.ClearToEmpty();
}
inline const std::string& StringVoteRequest::logname() const {
  // @@protoc_insertion_point(field_get:RaftNodes.StringVoteRequest.logname)
  return _internal_logname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringVoteRequest::set_logname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.logname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RaftNodes.StringVoteRequest.logname)
}
inline std::string* StringVoteRequest::mutable_logname() {
  std::string* _s = _internal_mutable_logname();
  // @@protoc_insertion_point(field_mutable:RaftNodes.StringVoteRequest.logname)
  return _s;
}
inline const std::string& StringVoteRequest::_internal_logname() const {
  return _impl_.logname_.Get();
}
inline void StringVoteRequest::_internal_set_logname(const std::string& value) {
  
  _impl_.logname_.Set(value, GetArenaForAllocation());
}
inline std::string* StringVoteRequest::_internal_mutable_logname() {
  
  return _impl_.logname_.Mutable(GetArenaForAllocation());
}
inline std::string* StringVoteRequest::release_logname() {
  // @@protoc_insertion_point(field_release:RaftNodes.StringVoteRequest.logname)
  return _impl_.logname_.Release();
}
inline void StringVoteRequest::set_allocated_logname(std::string* logname) {
  if (logname != nullptr) {
    
  } else {
    
  }
  _impl_.logname_.SetAllocated(logname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.logname_.IsDefault()) {
    _impl_.logname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RaftNodes.StringVoteRequest.logname)
}

// -------------------------------------------------------------------

// StringVoteReply

// int32 rcv_termnumber = 1;
inline void StringVoteReply::clear_rcv_termnumber() {
  _impl_.rcv_termnumber_ = 0;
}
inline int32_t StringVoteReply::_internal_rcv_termnumber() const {
  return _impl_.rcv_termnumber_;
}
inline int32_t StringVoteReply::rcv_termnumber() const {
  // @@protoc_insertion_point(field_get:RaftNodes.StringVoteReply.rcv_termnumber)
  return _internal_rcv_termnumber();
}
inline void StringVoteReply::_internal_set_rcv_termnumber(int32_t value) {
  
  _impl_.rcv_termnumber_ = value;
}
inline void StringVoteReply::set_rcv_termnumber(int32_t value) {
  _internal_set_rcv_termnumber(value);
  // @@protoc_insertion_point(field_set:RaftNodes.StringVoteReply.rcv_termnumber)
}

// int32 rcv_nodeid = 2;
inline void StringVoteReply::clear_rcv_nodeid() {
  _impl_.rcv_nodeid_ = 0;
}
inline int32_t StringVoteReply::_internal_rcv_nodeid() const {
  return _impl_.rcv_nodeid_;
}
inline int32_t StringVoteReply::rcv_nodeid() const {
  // @@protoc_insertion_point(field_get:RaftNodes.StringVoteReply.rcv_nodeid)
  return _internal_rcv_nodeid();
}
inline void StringVoteReply::_internal_set_rcv_nodeid(int32_t value) {
  
  _impl_.rcv_nodeid_ = value;
}
inline void StringVoteReply::set_rcv_nodeid(int32_t value) {
  _internal_set_rcv_nodeid(value);
  // @@protoc_insertion_point(field_set:RaftNodes.StringVoteReply.rcv_nodeid)
}

// string rcv_vote = 3;
inline void StringVoteReply::clear_rcv_vote() {
  _impl_.rcv_vote_.ClearToEmpty();
}
inline const std::string& StringVoteReply::rcv_vote() const {
  // @@protoc_insertion_point(field_get:RaftNodes.StringVoteReply.rcv_vote)
  return _internal_rcv_vote();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringVoteReply::set_rcv_vote(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rcv_vote_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RaftNodes.StringVoteReply.rcv_vote)
}
inline std::string* StringVoteReply::mutable_rcv_vote() {
  std::string* _s = _internal_mutable_rcv_vote();
  // @@protoc_insertion_point(field_mutable:RaftNodes.StringVoteReply.rcv_vote)
  return _s;
}
inline const std::string& StringVoteReply::_internal_rcv_vote() const {
  return _impl_.rcv_vote_.Get();
}
inline void StringVoteReply::_internal_set_rcv_vote(const std::string& value) {
  
  _impl_.rcv_vote_.Set(value, GetArenaForAllocation());
}
inline std::string* StringVoteReply::_internal_mutable_rcv_vote() {
  
  return _impl_.rcv_vote_.Mutable(GetArenaForAllocation());
}
inline std::string* StringVoteReply::release_rcv_vote() {
  // @@protoc_insertion_point(field_release:RaftNodes.StringVoteReply.rcv_vote)
  return _impl_.rcv_vote_.Release();
}
inline void StringVoteReply::set_allocated_rcv_vote(std::string* rcv_vote) {
  if (rcv_vote != nullptr) {
    
  } else {
    
  }
  _impl_.rcv_vote_.SetAllocated(rcv_vote, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rcv_vote_.IsDefault()) {
    _impl_.rcv_vote_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RaftNodes.StringVoteReply.rcv_vote)
}

// -------------------------------------------------------------------

// StringStatusUptateRequest

// string status = 1;
inline void StringStatusUptateRequest::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& StringStatusUptateRequest::status() const {
  // @@protoc_insertion_point(field_get:RaftNodes.StringStatusUptateRequest.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringStatusUptateRequest::set_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RaftNodes.StringStatusUptateRequest.status)
}
inline std::string* StringStatusUptateRequest::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:RaftNodes.StringStatusUptateRequest.status)
  return _s;
}
inline const std::string& StringStatusUptateRequest::_internal_status() const {
  return _impl_.status_.Get();
}
inline void StringStatusUptateRequest::_internal_set_status(const std::string& value) {
  
  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* StringStatusUptateRequest::_internal_mutable_status() {
  
  return _impl_.status_.Mutable(GetArenaForAllocation());
}
inline std::string* StringStatusUptateRequest::release_status() {
  // @@protoc_insertion_point(field_release:RaftNodes.StringStatusUptateRequest.status)
  return _impl_.status_.Release();
}
inline void StringStatusUptateRequest::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  _impl_.status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RaftNodes.StringStatusUptateRequest.status)
}

// -------------------------------------------------------------------

// StringStatusUptateReply

// string rcv_status = 1;
inline void StringStatusUptateReply::clear_rcv_status() {
  _impl_.rcv_status_.ClearToEmpty();
}
inline const std::string& StringStatusUptateReply::rcv_status() const {
  // @@protoc_insertion_point(field_get:RaftNodes.StringStatusUptateReply.rcv_status)
  return _internal_rcv_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringStatusUptateReply::set_rcv_status(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rcv_status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RaftNodes.StringStatusUptateReply.rcv_status)
}
inline std::string* StringStatusUptateReply::mutable_rcv_status() {
  std::string* _s = _internal_mutable_rcv_status();
  // @@protoc_insertion_point(field_mutable:RaftNodes.StringStatusUptateReply.rcv_status)
  return _s;
}
inline const std::string& StringStatusUptateReply::_internal_rcv_status() const {
  return _impl_.rcv_status_.Get();
}
inline void StringStatusUptateReply::_internal_set_rcv_status(const std::string& value) {
  
  _impl_.rcv_status_.Set(value, GetArenaForAllocation());
}
inline std::string* StringStatusUptateReply::_internal_mutable_rcv_status() {
  
  return _impl_.rcv_status_.Mutable(GetArenaForAllocation());
}
inline std::string* StringStatusUptateReply::release_rcv_status() {
  // @@protoc_insertion_point(field_release:RaftNodes.StringStatusUptateReply.rcv_status)
  return _impl_.rcv_status_.Release();
}
inline void StringStatusUptateReply::set_allocated_rcv_status(std::string* rcv_status) {
  if (rcv_status != nullptr) {
    
  } else {
    
  }
  _impl_.rcv_status_.SetAllocated(rcv_status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rcv_status_.IsDefault()) {
    _impl_.rcv_status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RaftNodes.StringStatusUptateReply.rcv_status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace RaftNodes

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_node_2eproto
