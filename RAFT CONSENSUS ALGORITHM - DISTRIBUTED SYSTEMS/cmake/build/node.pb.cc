// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node.proto

#include "node.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace RaftNodes {
PROTOBUF_CONSTEXPR StringRequest::StringRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nodestatus_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nodeid_)*/0
  , /*decltype(_impl_.termnumber_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StringRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringRequestDefaultTypeInternal() {}
  union {
    StringRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringRequestDefaultTypeInternal _StringRequest_default_instance_;
PROTOBUF_CONSTEXPR StringReply::StringReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rcv_nodestatus_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rcv_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rcv_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rcv_nodeid_)*/0
  , /*decltype(_impl_.rcv_termnumber_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StringReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringReplyDefaultTypeInternal() {}
  union {
    StringReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringReplyDefaultTypeInternal _StringReply_default_instance_;
PROTOBUF_CONSTEXPR StringVoteRequest::StringVoteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.logname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.termnumber_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StringVoteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringVoteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringVoteRequestDefaultTypeInternal() {}
  union {
    StringVoteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringVoteRequestDefaultTypeInternal _StringVoteRequest_default_instance_;
PROTOBUF_CONSTEXPR StringVoteReply::StringVoteReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rcv_vote_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rcv_termnumber_)*/0
  , /*decltype(_impl_.rcv_nodeid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StringVoteReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringVoteReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringVoteReplyDefaultTypeInternal() {}
  union {
    StringVoteReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringVoteReplyDefaultTypeInternal _StringVoteReply_default_instance_;
PROTOBUF_CONSTEXPR StringStatusUptateRequest::StringStatusUptateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StringStatusUptateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringStatusUptateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringStatusUptateRequestDefaultTypeInternal() {}
  union {
    StringStatusUptateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringStatusUptateRequestDefaultTypeInternal _StringStatusUptateRequest_default_instance_;
PROTOBUF_CONSTEXPR StringStatusUptateReply::StringStatusUptateReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rcv_status_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StringStatusUptateReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringStatusUptateReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringStatusUptateReplyDefaultTypeInternal() {}
  union {
    StringStatusUptateReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringStatusUptateReplyDefaultTypeInternal _StringStatusUptateReply_default_instance_;
}  // namespace RaftNodes
static ::_pb::Metadata file_level_metadata_node_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_node_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_node_2eproto = nullptr;

const uint32_t TableStruct_node_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RaftNodes::StringRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RaftNodes::StringRequest, _impl_.nodeid_),
  PROTOBUF_FIELD_OFFSET(::RaftNodes::StringRequest, _impl_.nodestatus_),
  PROTOBUF_FIELD_OFFSET(::RaftNodes::StringRequest, _impl_.termnumber_),
  PROTOBUF_FIELD_OFFSET(::RaftNodes::StringRequest, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::RaftNodes::StringRequest, _impl_.address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RaftNodes::StringReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RaftNodes::StringReply, _impl_.rcv_nodeid_),
  PROTOBUF_FIELD_OFFSET(::RaftNodes::StringReply, _impl_.rcv_nodestatus_),
  PROTOBUF_FIELD_OFFSET(::RaftNodes::StringReply, _impl_.rcv_termnumber_),
  PROTOBUF_FIELD_OFFSET(::RaftNodes::StringReply, _impl_.rcv_message_),
  PROTOBUF_FIELD_OFFSET(::RaftNodes::StringReply, _impl_.rcv_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RaftNodes::StringVoteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RaftNodes::StringVoteRequest, _impl_.termnumber_),
  PROTOBUF_FIELD_OFFSET(::RaftNodes::StringVoteRequest, _impl_.logname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RaftNodes::StringVoteReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RaftNodes::StringVoteReply, _impl_.rcv_termnumber_),
  PROTOBUF_FIELD_OFFSET(::RaftNodes::StringVoteReply, _impl_.rcv_nodeid_),
  PROTOBUF_FIELD_OFFSET(::RaftNodes::StringVoteReply, _impl_.rcv_vote_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RaftNodes::StringStatusUptateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RaftNodes::StringStatusUptateRequest, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RaftNodes::StringStatusUptateReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RaftNodes::StringStatusUptateReply, _impl_.rcv_status_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::RaftNodes::StringRequest)},
  { 11, -1, -1, sizeof(::RaftNodes::StringReply)},
  { 22, -1, -1, sizeof(::RaftNodes::StringVoteRequest)},
  { 30, -1, -1, sizeof(::RaftNodes::StringVoteReply)},
  { 39, -1, -1, sizeof(::RaftNodes::StringStatusUptateRequest)},
  { 46, -1, -1, sizeof(::RaftNodes::StringStatusUptateReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::RaftNodes::_StringRequest_default_instance_._instance,
  &::RaftNodes::_StringReply_default_instance_._instance,
  &::RaftNodes::_StringVoteRequest_default_instance_._instance,
  &::RaftNodes::_StringVoteReply_default_instance_._instance,
  &::RaftNodes::_StringStatusUptateRequest_default_instance_._instance,
  &::RaftNodes::_StringStatusUptateReply_default_instance_._instance,
};

const char descriptor_table_protodef_node_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nnode.proto\022\tRaftNodes\"i\n\rStringRequest"
  "\022\016\n\006nodeid\030\001 \001(\005\022\022\n\nnodestatus\030\002 \001(\t\022\022\n\n"
  "termnumber\030\003 \001(\005\022\017\n\007message\030\004 \001(\t\022\017\n\007add"
  "ress\030\005 \001(\t\"{\n\013StringReply\022\022\n\nrcv_nodeid\030"
  "\001 \001(\005\022\026\n\016rcv_nodestatus\030\002 \001(\t\022\026\n\016rcv_ter"
  "mnumber\030\003 \001(\005\022\023\n\013rcv_message\030\004 \001(\t\022\023\n\013rc"
  "v_address\030\005 \001(\t\"8\n\021StringVoteRequest\022\022\n\n"
  "termnumber\030\001 \001(\005\022\017\n\007logname\030\002 \001(\t\"O\n\017Str"
  "ingVoteReply\022\026\n\016rcv_termnumber\030\001 \001(\005\022\022\n\n"
  "rcv_nodeid\030\002 \001(\005\022\020\n\010rcv_vote\030\003 \001(\t\"+\n\031St"
  "ringStatusUptateRequest\022\016\n\006status\030\001 \001(\t\""
  "-\n\027StringStatusUptateReply\022\022\n\nrcv_status"
  "\030\001 \001(\t2\205\002\n\nMsgService\022A\n\013sendRequest\022\030.R"
  "aftNodes.StringRequest\032\026.RaftNodes.Strin"
  "gReply\"\000\022M\n\017sendVoteRequest\022\034.RaftNodes."
  "StringVoteRequest\032\032.RaftNodes.StringVote"
  "Reply\"\000\022e\n\027sendStatusUpdateRequest\022$.Raf"
  "tNodes.StringStatusUptateRequest\032\".RaftN"
  "odes.StringStatusUptateReply\"\000B\t\n\007ex.grp"
  "cb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_node_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_node_2eproto = {
    false, false, 769, descriptor_table_protodef_node_2eproto,
    "node.proto",
    &descriptor_table_node_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_node_2eproto::offsets,
    file_level_metadata_node_2eproto, file_level_enum_descriptors_node_2eproto,
    file_level_service_descriptors_node_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_node_2eproto_getter() {
  return &descriptor_table_node_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_node_2eproto(&descriptor_table_node_2eproto);
namespace RaftNodes {

// ===================================================================

class StringRequest::_Internal {
 public:
};

StringRequest::StringRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RaftNodes.StringRequest)
}
StringRequest::StringRequest(const StringRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nodestatus_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.nodeid_){}
    , decltype(_impl_.termnumber_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nodestatus_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nodestatus_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nodestatus().empty()) {
    _this->_impl_.nodestatus_.Set(from._internal_nodestatus(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.nodeid_, &from._impl_.nodeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.termnumber_) -
    reinterpret_cast<char*>(&_impl_.nodeid_)) + sizeof(_impl_.termnumber_));
  // @@protoc_insertion_point(copy_constructor:RaftNodes.StringRequest)
}

inline void StringRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nodestatus_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.nodeid_){0}
    , decltype(_impl_.termnumber_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nodestatus_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nodestatus_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StringRequest::~StringRequest() {
  // @@protoc_insertion_point(destructor:RaftNodes.StringRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nodestatus_.Destroy();
  _impl_.message_.Destroy();
  _impl_.address_.Destroy();
}

void StringRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RaftNodes.StringRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodestatus_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _impl_.address_.ClearToEmpty();
  ::memset(&_impl_.nodeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.termnumber_) -
      reinterpret_cast<char*>(&_impl_.nodeid_)) + sizeof(_impl_.termnumber_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 nodeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nodestatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nodestatus();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RaftNodes.StringRequest.nodestatus"));
        } else
          goto handle_unusual;
        continue;
      // int32 termnumber = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.termnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RaftNodes.StringRequest.message"));
        } else
          goto handle_unusual;
        continue;
      // string address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RaftNodes.StringRequest.address"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RaftNodes.StringRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nodeid = 1;
  if (this->_internal_nodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_nodeid(), target);
  }

  // string nodestatus = 2;
  if (!this->_internal_nodestatus().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodestatus().data(), static_cast<int>(this->_internal_nodestatus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RaftNodes.StringRequest.nodestatus");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nodestatus(), target);
  }

  // int32 termnumber = 3;
  if (this->_internal_termnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_termnumber(), target);
  }

  // string message = 4;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RaftNodes.StringRequest.message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message(), target);
  }

  // string address = 5;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RaftNodes.StringRequest.address");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RaftNodes.StringRequest)
  return target;
}

size_t StringRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RaftNodes.StringRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nodestatus = 2;
  if (!this->_internal_nodestatus().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodestatus());
  }

  // string message = 4;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string address = 5;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // int32 nodeid = 1;
  if (this->_internal_nodeid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nodeid());
  }

  // int32 termnumber = 3;
  if (this->_internal_termnumber() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_termnumber());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringRequest::GetClassData() const { return &_class_data_; }


void StringRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringRequest*>(&to_msg);
  auto& from = static_cast<const StringRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RaftNodes.StringRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nodestatus().empty()) {
    _this->_internal_set_nodestatus(from._internal_nodestatus());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_nodeid() != 0) {
    _this->_internal_set_nodeid(from._internal_nodeid());
  }
  if (from._internal_termnumber() != 0) {
    _this->_internal_set_termnumber(from._internal_termnumber());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringRequest::CopyFrom(const StringRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RaftNodes.StringRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringRequest::IsInitialized() const {
  return true;
}

void StringRequest::InternalSwap(StringRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nodestatus_, lhs_arena,
      &other->_impl_.nodestatus_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StringRequest, _impl_.termnumber_)
      + sizeof(StringRequest::_impl_.termnumber_)
      - PROTOBUF_FIELD_OFFSET(StringRequest, _impl_.nodeid_)>(
          reinterpret_cast<char*>(&_impl_.nodeid_),
          reinterpret_cast<char*>(&other->_impl_.nodeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StringRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_node_2eproto_getter, &descriptor_table_node_2eproto_once,
      file_level_metadata_node_2eproto[0]);
}

// ===================================================================

class StringReply::_Internal {
 public:
};

StringReply::StringReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RaftNodes.StringReply)
}
StringReply::StringReply(const StringReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rcv_nodestatus_){}
    , decltype(_impl_.rcv_message_){}
    , decltype(_impl_.rcv_address_){}
    , decltype(_impl_.rcv_nodeid_){}
    , decltype(_impl_.rcv_termnumber_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rcv_nodestatus_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rcv_nodestatus_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rcv_nodestatus().empty()) {
    _this->_impl_.rcv_nodestatus_.Set(from._internal_rcv_nodestatus(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rcv_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rcv_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rcv_message().empty()) {
    _this->_impl_.rcv_message_.Set(from._internal_rcv_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.rcv_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rcv_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rcv_address().empty()) {
    _this->_impl_.rcv_address_.Set(from._internal_rcv_address(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.rcv_nodeid_, &from._impl_.rcv_nodeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rcv_termnumber_) -
    reinterpret_cast<char*>(&_impl_.rcv_nodeid_)) + sizeof(_impl_.rcv_termnumber_));
  // @@protoc_insertion_point(copy_constructor:RaftNodes.StringReply)
}

inline void StringReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rcv_nodestatus_){}
    , decltype(_impl_.rcv_message_){}
    , decltype(_impl_.rcv_address_){}
    , decltype(_impl_.rcv_nodeid_){0}
    , decltype(_impl_.rcv_termnumber_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.rcv_nodestatus_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rcv_nodestatus_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rcv_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rcv_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rcv_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rcv_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StringReply::~StringReply() {
  // @@protoc_insertion_point(destructor:RaftNodes.StringReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rcv_nodestatus_.Destroy();
  _impl_.rcv_message_.Destroy();
  _impl_.rcv_address_.Destroy();
}

void StringReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringReply::Clear() {
// @@protoc_insertion_point(message_clear_start:RaftNodes.StringReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rcv_nodestatus_.ClearToEmpty();
  _impl_.rcv_message_.ClearToEmpty();
  _impl_.rcv_address_.ClearToEmpty();
  ::memset(&_impl_.rcv_nodeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rcv_termnumber_) -
      reinterpret_cast<char*>(&_impl_.rcv_nodeid_)) + sizeof(_impl_.rcv_termnumber_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 rcv_nodeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.rcv_nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string rcv_nodestatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_rcv_nodestatus();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RaftNodes.StringReply.rcv_nodestatus"));
        } else
          goto handle_unusual;
        continue;
      // int32 rcv_termnumber = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.rcv_termnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string rcv_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_rcv_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RaftNodes.StringReply.rcv_message"));
        } else
          goto handle_unusual;
        continue;
      // string rcv_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_rcv_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RaftNodes.StringReply.rcv_address"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RaftNodes.StringReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rcv_nodeid = 1;
  if (this->_internal_rcv_nodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_rcv_nodeid(), target);
  }

  // string rcv_nodestatus = 2;
  if (!this->_internal_rcv_nodestatus().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rcv_nodestatus().data(), static_cast<int>(this->_internal_rcv_nodestatus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RaftNodes.StringReply.rcv_nodestatus");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rcv_nodestatus(), target);
  }

  // int32 rcv_termnumber = 3;
  if (this->_internal_rcv_termnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_rcv_termnumber(), target);
  }

  // string rcv_message = 4;
  if (!this->_internal_rcv_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rcv_message().data(), static_cast<int>(this->_internal_rcv_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RaftNodes.StringReply.rcv_message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_rcv_message(), target);
  }

  // string rcv_address = 5;
  if (!this->_internal_rcv_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rcv_address().data(), static_cast<int>(this->_internal_rcv_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RaftNodes.StringReply.rcv_address");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_rcv_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RaftNodes.StringReply)
  return target;
}

size_t StringReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RaftNodes.StringReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rcv_nodestatus = 2;
  if (!this->_internal_rcv_nodestatus().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rcv_nodestatus());
  }

  // string rcv_message = 4;
  if (!this->_internal_rcv_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rcv_message());
  }

  // string rcv_address = 5;
  if (!this->_internal_rcv_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rcv_address());
  }

  // int32 rcv_nodeid = 1;
  if (this->_internal_rcv_nodeid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rcv_nodeid());
  }

  // int32 rcv_termnumber = 3;
  if (this->_internal_rcv_termnumber() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rcv_termnumber());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringReply::GetClassData() const { return &_class_data_; }


void StringReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringReply*>(&to_msg);
  auto& from = static_cast<const StringReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RaftNodes.StringReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rcv_nodestatus().empty()) {
    _this->_internal_set_rcv_nodestatus(from._internal_rcv_nodestatus());
  }
  if (!from._internal_rcv_message().empty()) {
    _this->_internal_set_rcv_message(from._internal_rcv_message());
  }
  if (!from._internal_rcv_address().empty()) {
    _this->_internal_set_rcv_address(from._internal_rcv_address());
  }
  if (from._internal_rcv_nodeid() != 0) {
    _this->_internal_set_rcv_nodeid(from._internal_rcv_nodeid());
  }
  if (from._internal_rcv_termnumber() != 0) {
    _this->_internal_set_rcv_termnumber(from._internal_rcv_termnumber());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringReply::CopyFrom(const StringReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RaftNodes.StringReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringReply::IsInitialized() const {
  return true;
}

void StringReply::InternalSwap(StringReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rcv_nodestatus_, lhs_arena,
      &other->_impl_.rcv_nodestatus_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rcv_message_, lhs_arena,
      &other->_impl_.rcv_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rcv_address_, lhs_arena,
      &other->_impl_.rcv_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StringReply, _impl_.rcv_termnumber_)
      + sizeof(StringReply::_impl_.rcv_termnumber_)
      - PROTOBUF_FIELD_OFFSET(StringReply, _impl_.rcv_nodeid_)>(
          reinterpret_cast<char*>(&_impl_.rcv_nodeid_),
          reinterpret_cast<char*>(&other->_impl_.rcv_nodeid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StringReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_node_2eproto_getter, &descriptor_table_node_2eproto_once,
      file_level_metadata_node_2eproto[1]);
}

// ===================================================================

class StringVoteRequest::_Internal {
 public:
};

StringVoteRequest::StringVoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RaftNodes.StringVoteRequest)
}
StringVoteRequest::StringVoteRequest(const StringVoteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringVoteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.logname_){}
    , decltype(_impl_.termnumber_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.logname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_logname().empty()) {
    _this->_impl_.logname_.Set(from._internal_logname(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.termnumber_ = from._impl_.termnumber_;
  // @@protoc_insertion_point(copy_constructor:RaftNodes.StringVoteRequest)
}

inline void StringVoteRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.logname_){}
    , decltype(_impl_.termnumber_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.logname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.logname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StringVoteRequest::~StringVoteRequest() {
  // @@protoc_insertion_point(destructor:RaftNodes.StringVoteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringVoteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.logname_.Destroy();
}

void StringVoteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringVoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RaftNodes.StringVoteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.logname_.ClearToEmpty();
  _impl_.termnumber_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringVoteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 termnumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.termnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string logname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_logname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RaftNodes.StringVoteRequest.logname"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringVoteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RaftNodes.StringVoteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 termnumber = 1;
  if (this->_internal_termnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_termnumber(), target);
  }

  // string logname = 2;
  if (!this->_internal_logname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logname().data(), static_cast<int>(this->_internal_logname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RaftNodes.StringVoteRequest.logname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_logname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RaftNodes.StringVoteRequest)
  return target;
}

size_t StringVoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RaftNodes.StringVoteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string logname = 2;
  if (!this->_internal_logname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logname());
  }

  // int32 termnumber = 1;
  if (this->_internal_termnumber() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_termnumber());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringVoteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringVoteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringVoteRequest::GetClassData() const { return &_class_data_; }


void StringVoteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringVoteRequest*>(&to_msg);
  auto& from = static_cast<const StringVoteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RaftNodes.StringVoteRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_logname().empty()) {
    _this->_internal_set_logname(from._internal_logname());
  }
  if (from._internal_termnumber() != 0) {
    _this->_internal_set_termnumber(from._internal_termnumber());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringVoteRequest::CopyFrom(const StringVoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RaftNodes.StringVoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringVoteRequest::IsInitialized() const {
  return true;
}

void StringVoteRequest::InternalSwap(StringVoteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.logname_, lhs_arena,
      &other->_impl_.logname_, rhs_arena
  );
  swap(_impl_.termnumber_, other->_impl_.termnumber_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringVoteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_node_2eproto_getter, &descriptor_table_node_2eproto_once,
      file_level_metadata_node_2eproto[2]);
}

// ===================================================================

class StringVoteReply::_Internal {
 public:
};

StringVoteReply::StringVoteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RaftNodes.StringVoteReply)
}
StringVoteReply::StringVoteReply(const StringVoteReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringVoteReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rcv_vote_){}
    , decltype(_impl_.rcv_termnumber_){}
    , decltype(_impl_.rcv_nodeid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rcv_vote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rcv_vote_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rcv_vote().empty()) {
    _this->_impl_.rcv_vote_.Set(from._internal_rcv_vote(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.rcv_termnumber_, &from._impl_.rcv_termnumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rcv_nodeid_) -
    reinterpret_cast<char*>(&_impl_.rcv_termnumber_)) + sizeof(_impl_.rcv_nodeid_));
  // @@protoc_insertion_point(copy_constructor:RaftNodes.StringVoteReply)
}

inline void StringVoteReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rcv_vote_){}
    , decltype(_impl_.rcv_termnumber_){0}
    , decltype(_impl_.rcv_nodeid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.rcv_vote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rcv_vote_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StringVoteReply::~StringVoteReply() {
  // @@protoc_insertion_point(destructor:RaftNodes.StringVoteReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringVoteReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rcv_vote_.Destroy();
}

void StringVoteReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringVoteReply::Clear() {
// @@protoc_insertion_point(message_clear_start:RaftNodes.StringVoteReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rcv_vote_.ClearToEmpty();
  ::memset(&_impl_.rcv_termnumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rcv_nodeid_) -
      reinterpret_cast<char*>(&_impl_.rcv_termnumber_)) + sizeof(_impl_.rcv_nodeid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringVoteReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 rcv_termnumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.rcv_termnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rcv_nodeid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rcv_nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string rcv_vote = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_rcv_vote();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RaftNodes.StringVoteReply.rcv_vote"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringVoteReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RaftNodes.StringVoteReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rcv_termnumber = 1;
  if (this->_internal_rcv_termnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_rcv_termnumber(), target);
  }

  // int32 rcv_nodeid = 2;
  if (this->_internal_rcv_nodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_rcv_nodeid(), target);
  }

  // string rcv_vote = 3;
  if (!this->_internal_rcv_vote().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rcv_vote().data(), static_cast<int>(this->_internal_rcv_vote().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RaftNodes.StringVoteReply.rcv_vote");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rcv_vote(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RaftNodes.StringVoteReply)
  return target;
}

size_t StringVoteReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RaftNodes.StringVoteReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rcv_vote = 3;
  if (!this->_internal_rcv_vote().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rcv_vote());
  }

  // int32 rcv_termnumber = 1;
  if (this->_internal_rcv_termnumber() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rcv_termnumber());
  }

  // int32 rcv_nodeid = 2;
  if (this->_internal_rcv_nodeid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rcv_nodeid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringVoteReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringVoteReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringVoteReply::GetClassData() const { return &_class_data_; }


void StringVoteReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringVoteReply*>(&to_msg);
  auto& from = static_cast<const StringVoteReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RaftNodes.StringVoteReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rcv_vote().empty()) {
    _this->_internal_set_rcv_vote(from._internal_rcv_vote());
  }
  if (from._internal_rcv_termnumber() != 0) {
    _this->_internal_set_rcv_termnumber(from._internal_rcv_termnumber());
  }
  if (from._internal_rcv_nodeid() != 0) {
    _this->_internal_set_rcv_nodeid(from._internal_rcv_nodeid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringVoteReply::CopyFrom(const StringVoteReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RaftNodes.StringVoteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringVoteReply::IsInitialized() const {
  return true;
}

void StringVoteReply::InternalSwap(StringVoteReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rcv_vote_, lhs_arena,
      &other->_impl_.rcv_vote_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StringVoteReply, _impl_.rcv_nodeid_)
      + sizeof(StringVoteReply::_impl_.rcv_nodeid_)
      - PROTOBUF_FIELD_OFFSET(StringVoteReply, _impl_.rcv_termnumber_)>(
          reinterpret_cast<char*>(&_impl_.rcv_termnumber_),
          reinterpret_cast<char*>(&other->_impl_.rcv_termnumber_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StringVoteReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_node_2eproto_getter, &descriptor_table_node_2eproto_once,
      file_level_metadata_node_2eproto[3]);
}

// ===================================================================

class StringStatusUptateRequest::_Internal {
 public:
};

StringStatusUptateRequest::StringStatusUptateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RaftNodes.StringStatusUptateRequest)
}
StringStatusUptateRequest::StringStatusUptateRequest(const StringStatusUptateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringStatusUptateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:RaftNodes.StringStatusUptateRequest)
}

inline void StringStatusUptateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StringStatusUptateRequest::~StringStatusUptateRequest() {
  // @@protoc_insertion_point(destructor:RaftNodes.StringStatusUptateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringStatusUptateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.status_.Destroy();
}

void StringStatusUptateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringStatusUptateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RaftNodes.StringStatusUptateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringStatusUptateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RaftNodes.StringStatusUptateRequest.status"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringStatusUptateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RaftNodes.StringStatusUptateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RaftNodes.StringStatusUptateRequest.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RaftNodes.StringStatusUptateRequest)
  return target;
}

size_t StringStatusUptateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RaftNodes.StringStatusUptateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringStatusUptateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringStatusUptateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringStatusUptateRequest::GetClassData() const { return &_class_data_; }


void StringStatusUptateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringStatusUptateRequest*>(&to_msg);
  auto& from = static_cast<const StringStatusUptateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RaftNodes.StringStatusUptateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringStatusUptateRequest::CopyFrom(const StringStatusUptateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RaftNodes.StringStatusUptateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringStatusUptateRequest::IsInitialized() const {
  return true;
}

void StringStatusUptateRequest::InternalSwap(StringStatusUptateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_, lhs_arena,
      &other->_impl_.status_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StringStatusUptateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_node_2eproto_getter, &descriptor_table_node_2eproto_once,
      file_level_metadata_node_2eproto[4]);
}

// ===================================================================

class StringStatusUptateReply::_Internal {
 public:
};

StringStatusUptateReply::StringStatusUptateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RaftNodes.StringStatusUptateReply)
}
StringStatusUptateReply::StringStatusUptateReply(const StringStatusUptateReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringStatusUptateReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rcv_status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rcv_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rcv_status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rcv_status().empty()) {
    _this->_impl_.rcv_status_.Set(from._internal_rcv_status(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:RaftNodes.StringStatusUptateReply)
}

inline void StringStatusUptateReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rcv_status_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.rcv_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rcv_status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StringStatusUptateReply::~StringStatusUptateReply() {
  // @@protoc_insertion_point(destructor:RaftNodes.StringStatusUptateReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringStatusUptateReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rcv_status_.Destroy();
}

void StringStatusUptateReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringStatusUptateReply::Clear() {
// @@protoc_insertion_point(message_clear_start:RaftNodes.StringStatusUptateReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rcv_status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringStatusUptateReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string rcv_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rcv_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RaftNodes.StringStatusUptateReply.rcv_status"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringStatusUptateReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RaftNodes.StringStatusUptateReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string rcv_status = 1;
  if (!this->_internal_rcv_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rcv_status().data(), static_cast<int>(this->_internal_rcv_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RaftNodes.StringStatusUptateReply.rcv_status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rcv_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RaftNodes.StringStatusUptateReply)
  return target;
}

size_t StringStatusUptateReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RaftNodes.StringStatusUptateReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rcv_status = 1;
  if (!this->_internal_rcv_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rcv_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringStatusUptateReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringStatusUptateReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringStatusUptateReply::GetClassData() const { return &_class_data_; }


void StringStatusUptateReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringStatusUptateReply*>(&to_msg);
  auto& from = static_cast<const StringStatusUptateReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RaftNodes.StringStatusUptateReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rcv_status().empty()) {
    _this->_internal_set_rcv_status(from._internal_rcv_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringStatusUptateReply::CopyFrom(const StringStatusUptateReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RaftNodes.StringStatusUptateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringStatusUptateReply::IsInitialized() const {
  return true;
}

void StringStatusUptateReply::InternalSwap(StringStatusUptateReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rcv_status_, lhs_arena,
      &other->_impl_.rcv_status_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StringStatusUptateReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_node_2eproto_getter, &descriptor_table_node_2eproto_once,
      file_level_metadata_node_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace RaftNodes
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RaftNodes::StringRequest*
Arena::CreateMaybeMessage< ::RaftNodes::StringRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RaftNodes::StringRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::RaftNodes::StringReply*
Arena::CreateMaybeMessage< ::RaftNodes::StringReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RaftNodes::StringReply >(arena);
}
template<> PROTOBUF_NOINLINE ::RaftNodes::StringVoteRequest*
Arena::CreateMaybeMessage< ::RaftNodes::StringVoteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RaftNodes::StringVoteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::RaftNodes::StringVoteReply*
Arena::CreateMaybeMessage< ::RaftNodes::StringVoteReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RaftNodes::StringVoteReply >(arena);
}
template<> PROTOBUF_NOINLINE ::RaftNodes::StringStatusUptateRequest*
Arena::CreateMaybeMessage< ::RaftNodes::StringStatusUptateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RaftNodes::StringStatusUptateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::RaftNodes::StringStatusUptateReply*
Arena::CreateMaybeMessage< ::RaftNodes::StringStatusUptateReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RaftNodes::StringStatusUptateReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
