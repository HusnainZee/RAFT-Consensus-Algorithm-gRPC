// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: node.proto
#ifndef GRPC_node_2eproto__INCLUDED
#define GRPC_node_2eproto__INCLUDED

#include "node.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace RaftNodes {

class MsgService final {
 public:
  static constexpr char const* service_full_name() {
    return "RaftNodes.MsgService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status sendRequest(::grpc::ClientContext* context, const ::RaftNodes::StringRequest& request, ::RaftNodes::StringReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RaftNodes::StringReply>> AsyncsendRequest(::grpc::ClientContext* context, const ::RaftNodes::StringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RaftNodes::StringReply>>(AsyncsendRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RaftNodes::StringReply>> PrepareAsyncsendRequest(::grpc::ClientContext* context, const ::RaftNodes::StringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RaftNodes::StringReply>>(PrepareAsyncsendRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status sendVoteRequest(::grpc::ClientContext* context, const ::RaftNodes::StringVoteRequest& request, ::RaftNodes::StringVoteReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RaftNodes::StringVoteReply>> AsyncsendVoteRequest(::grpc::ClientContext* context, const ::RaftNodes::StringVoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RaftNodes::StringVoteReply>>(AsyncsendVoteRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RaftNodes::StringVoteReply>> PrepareAsyncsendVoteRequest(::grpc::ClientContext* context, const ::RaftNodes::StringVoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RaftNodes::StringVoteReply>>(PrepareAsyncsendVoteRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status sendStatusUpdateRequest(::grpc::ClientContext* context, const ::RaftNodes::StringStatusUptateRequest& request, ::RaftNodes::StringStatusUptateReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RaftNodes::StringStatusUptateReply>> AsyncsendStatusUpdateRequest(::grpc::ClientContext* context, const ::RaftNodes::StringStatusUptateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RaftNodes::StringStatusUptateReply>>(AsyncsendStatusUpdateRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RaftNodes::StringStatusUptateReply>> PrepareAsyncsendStatusUpdateRequest(::grpc::ClientContext* context, const ::RaftNodes::StringStatusUptateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RaftNodes::StringStatusUptateReply>>(PrepareAsyncsendStatusUpdateRequestRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void sendRequest(::grpc::ClientContext* context, const ::RaftNodes::StringRequest* request, ::RaftNodes::StringReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendRequest(::grpc::ClientContext* context, const ::RaftNodes::StringRequest* request, ::RaftNodes::StringReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void sendVoteRequest(::grpc::ClientContext* context, const ::RaftNodes::StringVoteRequest* request, ::RaftNodes::StringVoteReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendVoteRequest(::grpc::ClientContext* context, const ::RaftNodes::StringVoteRequest* request, ::RaftNodes::StringVoteReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void sendStatusUpdateRequest(::grpc::ClientContext* context, const ::RaftNodes::StringStatusUptateRequest* request, ::RaftNodes::StringStatusUptateReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendStatusUpdateRequest(::grpc::ClientContext* context, const ::RaftNodes::StringStatusUptateRequest* request, ::RaftNodes::StringStatusUptateReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RaftNodes::StringReply>* AsyncsendRequestRaw(::grpc::ClientContext* context, const ::RaftNodes::StringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RaftNodes::StringReply>* PrepareAsyncsendRequestRaw(::grpc::ClientContext* context, const ::RaftNodes::StringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RaftNodes::StringVoteReply>* AsyncsendVoteRequestRaw(::grpc::ClientContext* context, const ::RaftNodes::StringVoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RaftNodes::StringVoteReply>* PrepareAsyncsendVoteRequestRaw(::grpc::ClientContext* context, const ::RaftNodes::StringVoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RaftNodes::StringStatusUptateReply>* AsyncsendStatusUpdateRequestRaw(::grpc::ClientContext* context, const ::RaftNodes::StringStatusUptateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RaftNodes::StringStatusUptateReply>* PrepareAsyncsendStatusUpdateRequestRaw(::grpc::ClientContext* context, const ::RaftNodes::StringStatusUptateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status sendRequest(::grpc::ClientContext* context, const ::RaftNodes::StringRequest& request, ::RaftNodes::StringReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RaftNodes::StringReply>> AsyncsendRequest(::grpc::ClientContext* context, const ::RaftNodes::StringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RaftNodes::StringReply>>(AsyncsendRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RaftNodes::StringReply>> PrepareAsyncsendRequest(::grpc::ClientContext* context, const ::RaftNodes::StringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RaftNodes::StringReply>>(PrepareAsyncsendRequestRaw(context, request, cq));
    }
    ::grpc::Status sendVoteRequest(::grpc::ClientContext* context, const ::RaftNodes::StringVoteRequest& request, ::RaftNodes::StringVoteReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RaftNodes::StringVoteReply>> AsyncsendVoteRequest(::grpc::ClientContext* context, const ::RaftNodes::StringVoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RaftNodes::StringVoteReply>>(AsyncsendVoteRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RaftNodes::StringVoteReply>> PrepareAsyncsendVoteRequest(::grpc::ClientContext* context, const ::RaftNodes::StringVoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RaftNodes::StringVoteReply>>(PrepareAsyncsendVoteRequestRaw(context, request, cq));
    }
    ::grpc::Status sendStatusUpdateRequest(::grpc::ClientContext* context, const ::RaftNodes::StringStatusUptateRequest& request, ::RaftNodes::StringStatusUptateReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RaftNodes::StringStatusUptateReply>> AsyncsendStatusUpdateRequest(::grpc::ClientContext* context, const ::RaftNodes::StringStatusUptateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RaftNodes::StringStatusUptateReply>>(AsyncsendStatusUpdateRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RaftNodes::StringStatusUptateReply>> PrepareAsyncsendStatusUpdateRequest(::grpc::ClientContext* context, const ::RaftNodes::StringStatusUptateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RaftNodes::StringStatusUptateReply>>(PrepareAsyncsendStatusUpdateRequestRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void sendRequest(::grpc::ClientContext* context, const ::RaftNodes::StringRequest* request, ::RaftNodes::StringReply* response, std::function<void(::grpc::Status)>) override;
      void sendRequest(::grpc::ClientContext* context, const ::RaftNodes::StringRequest* request, ::RaftNodes::StringReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void sendVoteRequest(::grpc::ClientContext* context, const ::RaftNodes::StringVoteRequest* request, ::RaftNodes::StringVoteReply* response, std::function<void(::grpc::Status)>) override;
      void sendVoteRequest(::grpc::ClientContext* context, const ::RaftNodes::StringVoteRequest* request, ::RaftNodes::StringVoteReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void sendStatusUpdateRequest(::grpc::ClientContext* context, const ::RaftNodes::StringStatusUptateRequest* request, ::RaftNodes::StringStatusUptateReply* response, std::function<void(::grpc::Status)>) override;
      void sendStatusUpdateRequest(::grpc::ClientContext* context, const ::RaftNodes::StringStatusUptateRequest* request, ::RaftNodes::StringStatusUptateReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::RaftNodes::StringReply>* AsyncsendRequestRaw(::grpc::ClientContext* context, const ::RaftNodes::StringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RaftNodes::StringReply>* PrepareAsyncsendRequestRaw(::grpc::ClientContext* context, const ::RaftNodes::StringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RaftNodes::StringVoteReply>* AsyncsendVoteRequestRaw(::grpc::ClientContext* context, const ::RaftNodes::StringVoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RaftNodes::StringVoteReply>* PrepareAsyncsendVoteRequestRaw(::grpc::ClientContext* context, const ::RaftNodes::StringVoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RaftNodes::StringStatusUptateReply>* AsyncsendStatusUpdateRequestRaw(::grpc::ClientContext* context, const ::RaftNodes::StringStatusUptateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RaftNodes::StringStatusUptateReply>* PrepareAsyncsendStatusUpdateRequestRaw(::grpc::ClientContext* context, const ::RaftNodes::StringStatusUptateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_sendRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_sendVoteRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_sendStatusUpdateRequest_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status sendRequest(::grpc::ServerContext* context, const ::RaftNodes::StringRequest* request, ::RaftNodes::StringReply* response);
    virtual ::grpc::Status sendVoteRequest(::grpc::ServerContext* context, const ::RaftNodes::StringVoteRequest* request, ::RaftNodes::StringVoteReply* response);
    virtual ::grpc::Status sendStatusUpdateRequest(::grpc::ServerContext* context, const ::RaftNodes::StringStatusUptateRequest* request, ::RaftNodes::StringStatusUptateReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_sendRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_sendRequest() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_sendRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequest(::grpc::ServerContext* /*context*/, const ::RaftNodes::StringRequest* /*request*/, ::RaftNodes::StringReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendRequest(::grpc::ServerContext* context, ::RaftNodes::StringRequest* request, ::grpc::ServerAsyncResponseWriter< ::RaftNodes::StringReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_sendVoteRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_sendVoteRequest() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_sendVoteRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendVoteRequest(::grpc::ServerContext* /*context*/, const ::RaftNodes::StringVoteRequest* /*request*/, ::RaftNodes::StringVoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendVoteRequest(::grpc::ServerContext* context, ::RaftNodes::StringVoteRequest* request, ::grpc::ServerAsyncResponseWriter< ::RaftNodes::StringVoteReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_sendStatusUpdateRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_sendStatusUpdateRequest() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_sendStatusUpdateRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendStatusUpdateRequest(::grpc::ServerContext* /*context*/, const ::RaftNodes::StringStatusUptateRequest* /*request*/, ::RaftNodes::StringStatusUptateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendStatusUpdateRequest(::grpc::ServerContext* context, ::RaftNodes::StringStatusUptateRequest* request, ::grpc::ServerAsyncResponseWriter< ::RaftNodes::StringStatusUptateReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_sendRequest<WithAsyncMethod_sendVoteRequest<WithAsyncMethod_sendStatusUpdateRequest<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_sendRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_sendRequest() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::RaftNodes::StringRequest, ::RaftNodes::StringReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::RaftNodes::StringRequest* request, ::RaftNodes::StringReply* response) { return this->sendRequest(context, request, response); }));}
    void SetMessageAllocatorFor_sendRequest(
        ::grpc::MessageAllocator< ::RaftNodes::StringRequest, ::RaftNodes::StringReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::RaftNodes::StringRequest, ::RaftNodes::StringReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_sendRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequest(::grpc::ServerContext* /*context*/, const ::RaftNodes::StringRequest* /*request*/, ::RaftNodes::StringReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::RaftNodes::StringRequest* /*request*/, ::RaftNodes::StringReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_sendVoteRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_sendVoteRequest() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::RaftNodes::StringVoteRequest, ::RaftNodes::StringVoteReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::RaftNodes::StringVoteRequest* request, ::RaftNodes::StringVoteReply* response) { return this->sendVoteRequest(context, request, response); }));}
    void SetMessageAllocatorFor_sendVoteRequest(
        ::grpc::MessageAllocator< ::RaftNodes::StringVoteRequest, ::RaftNodes::StringVoteReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::RaftNodes::StringVoteRequest, ::RaftNodes::StringVoteReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_sendVoteRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendVoteRequest(::grpc::ServerContext* /*context*/, const ::RaftNodes::StringVoteRequest* /*request*/, ::RaftNodes::StringVoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendVoteRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::RaftNodes::StringVoteRequest* /*request*/, ::RaftNodes::StringVoteReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_sendStatusUpdateRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_sendStatusUpdateRequest() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::RaftNodes::StringStatusUptateRequest, ::RaftNodes::StringStatusUptateReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::RaftNodes::StringStatusUptateRequest* request, ::RaftNodes::StringStatusUptateReply* response) { return this->sendStatusUpdateRequest(context, request, response); }));}
    void SetMessageAllocatorFor_sendStatusUpdateRequest(
        ::grpc::MessageAllocator< ::RaftNodes::StringStatusUptateRequest, ::RaftNodes::StringStatusUptateReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::RaftNodes::StringStatusUptateRequest, ::RaftNodes::StringStatusUptateReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_sendStatusUpdateRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendStatusUpdateRequest(::grpc::ServerContext* /*context*/, const ::RaftNodes::StringStatusUptateRequest* /*request*/, ::RaftNodes::StringStatusUptateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendStatusUpdateRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::RaftNodes::StringStatusUptateRequest* /*request*/, ::RaftNodes::StringStatusUptateReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_sendRequest<WithCallbackMethod_sendVoteRequest<WithCallbackMethod_sendStatusUpdateRequest<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_sendRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_sendRequest() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_sendRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequest(::grpc::ServerContext* /*context*/, const ::RaftNodes::StringRequest* /*request*/, ::RaftNodes::StringReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_sendVoteRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_sendVoteRequest() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_sendVoteRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendVoteRequest(::grpc::ServerContext* /*context*/, const ::RaftNodes::StringVoteRequest* /*request*/, ::RaftNodes::StringVoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_sendStatusUpdateRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_sendStatusUpdateRequest() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_sendStatusUpdateRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendStatusUpdateRequest(::grpc::ServerContext* /*context*/, const ::RaftNodes::StringStatusUptateRequest* /*request*/, ::RaftNodes::StringStatusUptateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_sendRequest() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_sendRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequest(::grpc::ServerContext* /*context*/, const ::RaftNodes::StringRequest* /*request*/, ::RaftNodes::StringReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendVoteRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_sendVoteRequest() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_sendVoteRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendVoteRequest(::grpc::ServerContext* /*context*/, const ::RaftNodes::StringVoteRequest* /*request*/, ::RaftNodes::StringVoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendVoteRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendStatusUpdateRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_sendStatusUpdateRequest() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_sendStatusUpdateRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendStatusUpdateRequest(::grpc::ServerContext* /*context*/, const ::RaftNodes::StringStatusUptateRequest* /*request*/, ::RaftNodes::StringStatusUptateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendStatusUpdateRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_sendRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_sendRequest() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->sendRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_sendRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRequest(::grpc::ServerContext* /*context*/, const ::RaftNodes::StringRequest* /*request*/, ::RaftNodes::StringReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_sendVoteRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_sendVoteRequest() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->sendVoteRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_sendVoteRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendVoteRequest(::grpc::ServerContext* /*context*/, const ::RaftNodes::StringVoteRequest* /*request*/, ::RaftNodes::StringVoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendVoteRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_sendStatusUpdateRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_sendStatusUpdateRequest() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->sendStatusUpdateRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_sendStatusUpdateRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendStatusUpdateRequest(::grpc::ServerContext* /*context*/, const ::RaftNodes::StringStatusUptateRequest* /*request*/, ::RaftNodes::StringStatusUptateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendStatusUpdateRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_sendRequest() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::RaftNodes::StringRequest, ::RaftNodes::StringReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::RaftNodes::StringRequest, ::RaftNodes::StringReply>* streamer) {
                       return this->StreamedsendRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_sendRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendRequest(::grpc::ServerContext* /*context*/, const ::RaftNodes::StringRequest* /*request*/, ::RaftNodes::StringReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::RaftNodes::StringRequest,::RaftNodes::StringReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendVoteRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_sendVoteRequest() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::RaftNodes::StringVoteRequest, ::RaftNodes::StringVoteReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::RaftNodes::StringVoteRequest, ::RaftNodes::StringVoteReply>* streamer) {
                       return this->StreamedsendVoteRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_sendVoteRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendVoteRequest(::grpc::ServerContext* /*context*/, const ::RaftNodes::StringVoteRequest* /*request*/, ::RaftNodes::StringVoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendVoteRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::RaftNodes::StringVoteRequest,::RaftNodes::StringVoteReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendStatusUpdateRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_sendStatusUpdateRequest() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::RaftNodes::StringStatusUptateRequest, ::RaftNodes::StringStatusUptateReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::RaftNodes::StringStatusUptateRequest, ::RaftNodes::StringStatusUptateReply>* streamer) {
                       return this->StreamedsendStatusUpdateRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_sendStatusUpdateRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendStatusUpdateRequest(::grpc::ServerContext* /*context*/, const ::RaftNodes::StringStatusUptateRequest* /*request*/, ::RaftNodes::StringStatusUptateReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendStatusUpdateRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::RaftNodes::StringStatusUptateRequest,::RaftNodes::StringStatusUptateReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_sendRequest<WithStreamedUnaryMethod_sendVoteRequest<WithStreamedUnaryMethod_sendStatusUpdateRequest<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_sendRequest<WithStreamedUnaryMethod_sendVoteRequest<WithStreamedUnaryMethod_sendStatusUpdateRequest<Service > > > StreamedService;
};

}  // namespace RaftNodes


#endif  // GRPC_node_2eproto__INCLUDED
